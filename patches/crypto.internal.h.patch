--- /home/test/crypto.internal.h_old	2019-07-26 13:19:11.491169175 +0000
+++ src/crypto/internal.h	2019-07-26 13:34:23.266546681 +0000
@@ -703,6 +703,45 @@
 }
 #endif
 
+/*
+ * Macros for big endian systems.
+ *
+ * CRYPTO_bswap4/8   do unconditional byte swap, regardless of endian
+ * CRYPTO_BSWAP4/8   do byte swap on little endian
+ * BSWAP_32/64       do byte swap on big endian
+ * BSWAP_32/64_BITOP are for compile time constant initializer.
+ *                   It's slow so not used in running code.
+ */
+
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+#define CRYPTO_BSWAP4(x) (CRYPTO_bswap4(x))
+#define CRYPTO_BSWAP8(x) (CRYPTO_bswap8(x))
+#define BSWAP_32(x) (x)
+#define BSWAP_64(x) (x)
+#define BSWAP_32_BITOP(x) (x)
+#define BSWAP_64_BITOP(x) (x)
+#define BSWAP_ULONG(x) (x)
+#else
+#define CRYPTO_BSWAP4(x) (x)
+#define CRYPTO_BSWAP8(x) (x)
+#define BSWAP_32(x) (CRYPTO_bswap4(x))
+#define BSWAP_64(x) (CRYPTO_bswap8(x))
+#define BSWAP_32_BITOP(x) \
+  (((((uint32_t)(x)) & 0x000000ff) << 24) | \
+   ((((uint32_t)(x)) & 0x0000ff00) <<  8) | \
+   ((((uint32_t)(x)) >>  8) & 0x0000ff00) | \
+   ((((uint32_t)(x)) >> 24) & 0x000000ff))
+#define BSWAP_64_BITOP(x) \
+  ((uint64_t)BSWAP_32_BITOP((uint64_t)(x) & 0x00000000ffffffff) << 32 | \
+   (uint64_t)BSWAP_32_BITOP((uint64_t)(x) >> 32))
+#if defined(OPENSSL_64_BIT)
+#define BSWAP_ULONG(x) BSWAP_64(x)
+#elif define(OPENSSL_32_BIT)
+#define BSWAP_ULONG(x) BSWAP_32(x)
+#else
+#error "Must define either OPENSSL_32_BIT or OPENSSL_64_BIT"
+#endif
+#endif
 
 // Language bug workarounds.
 //
